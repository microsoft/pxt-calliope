{
  "SoundExpression": "A sound expression.",
  "SoundExpression.play": "Starts to play a sound expression.",
  "SoundExpression.playUntilDone": "Plays a sound expression until finished",
  "TouchButtonEvent": "An action on a touch button",
  "basic": "Provides access to basic Calliope mini functionality.\n\nProvides access to basic calliope mini functionality.\n\nProvides access to basic Calliope mini functionality.\n\nProvides access to basic calliope mini functionality.",
  "basic.setLedColors": "Sets the color on the built-in RGB LED. Set to 0 to turn off.",
  "basic.setLedColors|param|brightness": "The LED brightness in percent.",
  "basic.setLedColors|param|color1": "The color of the first LED in RGB format (e.g., 0xFF0000 for red).",
  "basic.setLedColors|param|color2": "The second LED color.",
  "basic.setLedColors|param|color3": "The third LED color.",
  "input": "Events and data from sensors",
  "input.logoIsPressed": "Get the logo state (pressed or not). Calliope mini 3 block.",
  "input.onLogoEvent": "Do something when the logo is touched and released again. Calliope mini 3 block.",
  "input.onLogoEvent|param|body": "the code to run when the logo is pressed",
  "motors": "Blocks to control the onboard motors",
  "motors.dualMotorPower": "Controls two motors attached to the board.",
  "motors.motorCommand": "Send break, coast or sleep commands to the motor. Has no effect in dual-motor mode.",
  "motors.motorPower": "Turns on the motor at a certain percent of power. Switches to single motor mode!",
  "motors.motorPower|param|power": "%percent of power sent to the motor. Negative power goes backward. eg: 50",
  "music": "Generation of music tones.",
  "music.builtInPlayableMelody": "Gets the melody array of a built-in melody.",
  "music.builtInPlayableMelody|param|melody": "the melody name",
  "music.builtinPlayableSoundEffect": "Get the sound expression string for a built-in sound effect.",
  "music.builtinPlayableSoundEffect|param|soundExpression": "a sound expression for a built-in sound effect",
  "music.builtinSoundEffect": "Get the sound expression string for a built-in a sound effect.",
  "music.builtinSoundEffect|param|soundExpression": "a sound expression for a built-in sound effect",
  "music.createSoundEffect": "Create a sound expression from a set of sound effect parameters.",
  "music.createSoundEffect|param|duration": "the amount of time in milliseconds (ms) that sound will play for",
  "music.createSoundEffect|param|effect": "the effect to apply to the waveform or volume",
  "music.createSoundEffect|param|endFrequency": "ending frequency for the sound effect waveform",
  "music.createSoundEffect|param|endVolume": "ending volume of the sound, or ending amplitude",
  "music.createSoundEffect|param|interpolation": "interpolation method for frequency scaling",
  "music.createSoundEffect|param|startFrequency": "starting frequency for the sound effect waveform",
  "music.createSoundEffect|param|startVolume": "starting volume of the sound, or starting amplitude",
  "music.createSoundEffect|param|waveShape": "waveform of the sound effect",
  "music.createSoundExpression": "Create a sound expression from a set of sound effect parameters.",
  "music.createSoundExpression|param|duration": "the amount of time in milliseconds (ms) that sound will play for",
  "music.createSoundExpression|param|effect": "the effect to apply to the waveform or volume",
  "music.createSoundExpression|param|endFrequency": "ending frequency for the sound effect waveform",
  "music.createSoundExpression|param|endVolume": "ending volume of the sound, or ending amplitude",
  "music.createSoundExpression|param|interpolation": "interpolation method for frequency scaling",
  "music.createSoundExpression|param|startFrequency": "starting frequency for the sound effect waveform",
  "music.createSoundExpression|param|startVolume": "starting volume of the sound, or starting amplitude",
  "music.createSoundExpression|param|waveShape": "waveform of the sound effect",
  "music.isSoundPlaying": "Check whether any sound is being played, no matter the source",
  "music.onEvent": "Registers code to run on various melody events",
  "music.playSoundEffect": "Play a sound effect from a sound expression string.",
  "music.playSoundEffect|param|mode": "the play mode, play until done or in the background",
  "music.playSoundEffect|param|sound": "the sound expression string",
  "music.setBuiltInSpeakerEnabled": "Turn the built-in speaker on or off.\nDisabling the speaker resets the sound pin to the default of P0.",
  "music.setBuiltInSpeakerEnabled|param|enabled": "whether the built-in speaker is enabled in addition to the sound pin",
  "music.setSilenceLevel": "Defines an optional sample level to generate during periods of silence.",
  "music.setVolume": "Set the default output volume of the sound synthesizer.",
  "music.setVolume|param|volume": "the volume 0...255",
  "music.tonePlayable": "Plays a tone through pin ``P0`` for the given duration.",
  "music.tonePlayable|param|duration": "tone duration in milliseconds (ms)",
  "music.tonePlayable|param|note": "pitch of the tone to play in Hertz (Hz).",
  "music.volume": "Returns the current output volume of the sound synthesizer.",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "pins.touchSetMode": "Configure the touch detection for the pins and logo.\nP0, P1, P2 use resistive touch by default.\nThe logo uses capacitative touch by default.",
  "pins.touchSetMode|param|mode": "the touch mode to use",
  "pins.touchSetMode|param|name": "target to change the touch mode for"
}