{
  "AcceleratorRange.EightG": "The accelerator measures forces up to 8 gravity",
  "AcceleratorRange.FourG": "The accelerator measures forces up to 4 gravity",
  "AcceleratorRange.OneG": "The accelerator measures forces up to 1 gravity",
  "AcceleratorRange.TwoG": "The accelerator measures forces up to 2 gravity",
  "Array": "Add, remove, and replace items in lists.",
  "Array._pickRandom": "Return a random value from the array",
  "Array._popStatement": "Remove the last element from an array and return it.",
  "Array._removeAtStatement": "Remove the element at a certain index.",
  "Array._shiftStatement": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array._unshiftStatement": "Add one element to the beginning of an array and return the new length of the array.",
  "Array.concat": "Concatenates the values with another array.",
  "Array.concat|param|arr": "The other array that is being concatenated with",
  "Array.every": "Tests whether all elements in the array pass the test implemented by the provided function.",
  "Array.every|param|callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
  "Array.fill": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
  "Array.filter": "Return the elements of an array that meet the condition specified in a callback function.",
  "Array.filter|param|callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
  "Array.find": "Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.",
  "Array.forEach": "Call a defined callback function on each element of an array.",
  "Array.forEach|param|callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
  "Array.get": "Get the value at a particular index",
  "Array.get|param|index": "the zero-based position in the list of the item, eg: 0",
  "Array.indexOf": "Return the index of the first occurrence of a value in an array.",
  "Array.indexOf|param|fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
  "Array.indexOf|param|item": "The value to locate in the array.",
  "Array.insertAt": "Insert the value at a particular index, increases length by 1",
  "Array.insertAt|param|index": "the zero-based position in the list to insert the value, eg: 0",
  "Array.isArray": "Check if a given object is an array.",
  "Array.join": "joins all elements of an array into a string and returns this string.",
  "Array.join|param|sep": "the string separator",
  "Array.length": "Get or set the length of an array. This number is one more than the index of the last element the array.",
  "Array.map": "Call a defined callback function on each element of an array, and return an array containing the results.",
  "Array.map|param|callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
  "Array.pop": "Remove the last element from an array and return it.",
  "Array.push": "Append a new element to an array.",
  "Array.reduce": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
  "Array.reduce|param|callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
  "Array.reduce|param|initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
  "Array.removeAt": "Remove the element at a certain index.",
  "Array.removeElement": "Remove the first occurence of an object. Returns true if removed.",
  "Array.reverse": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
  "Array.set": "Store a value at a particular index",
  "Array.set|param|index": "the zero-based position in the list to store the value, eg: 0",
  "Array.set|param|value": "the value to insert, eg: 0",
  "Array.shift": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array.slice": "Return a section of an array.",
  "Array.slice|param|end": "The end of the specified portion of the array. eg: 0",
  "Array.slice|param|start": "The beginning of the specified portion of the array. eg: 0",
  "Array.some": "Tests whether at least one element in the array passes the test implemented by the provided function.",
  "Array.some|param|callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
  "Array.sort": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
  "Array.splice": "Remove elements from an array.",
  "Array.splice|param|deleteCount": "The number of elements to remove. eg: 0",
  "Array.splice|param|start": "The zero-based location in the array from which to start removing elements. eg: 0",
  "Array.unshift": "Add one element to the beginning of an array and return the new length of the array.",
  "Array@type": "Add, remove, and replace items in lists.",
  "Boolean.toString": "Returns a string representation of an object.",
  "Buffer.chunked": "Splits buffer into parts no larger than specified",
  "Buffer.concat": "Return concatenation of current buffer and the given buffer\n\nConcatenates all buffers in the list",
  "Buffer.create": "Allocate a new buffer.",
  "Buffer.create|param|size": "number of bytes in the buffer",
  "Buffer.equals": "Returns true if this and the other buffer hold the same data",
  "Buffer.fill": "Fill (a fragment) of the buffer with given value.",
  "Buffer.fromArray": "Create a new buffer initialized to bytes from given array.",
  "Buffer.fromArray|param|bytes": "data to initialize with",
  "Buffer.fromBase64": "Create a new buffer, decoding a Base64 string",
  "Buffer.fromHex": "Create a new buffer, decoding a hex string",
  "Buffer.fromUTF8": "Create a new buffer from an UTF8-encoded string",
  "Buffer.fromUTF8|param|str": "the string to put in the buffer",
  "Buffer.getNumber": "Read a number in specified format from the buffer.",
  "Buffer.getUint8": "Reads an unsigned byte at a particular location",
  "Buffer.hash": "Compute k-bit FNV-1 non-cryptographic hash of the buffer.",
  "Buffer.indexOf": "Return position of other buffer in current buffer",
  "Buffer.isReadOnly": "Returns false when the buffer can be written to.",
  "Buffer.length": "Returns the length of a Buffer object.",
  "Buffer.packAt": "Writes numbers to the buffer according to the format",
  "Buffer.rotate": "Rotate buffer left in place.\n\n\n\nstart. eg: -1",
  "Buffer.rotate|param|length": "number of elements in buffer. If negative, length is set as the buffer length minus",
  "Buffer.rotate|param|offset": "number of bytes to shift; use negative value to shift right",
  "Buffer.rotate|param|start": "start offset in buffer. Default is 0.",
  "Buffer.setNumber": "Write a number in specified format in the buffer.",
  "Buffer.setUint8": "Writes an unsigned byte at a particular location",
  "Buffer.shift": "Shift buffer left in place, with zero padding.\n\n\n\nstart. eg: -1",
  "Buffer.shift|param|length": "number of elements in buffer. If negative, length is set as the buffer length minus",
  "Buffer.shift|param|offset": "number of bytes to shift; use negative value to shift right",
  "Buffer.shift|param|start": "start offset in buffer. Default is 0.",
  "Buffer.sizeOfNumberFormat": "Get the size in bytes of specified number format.",
  "Buffer.slice": "Return a copy of a fragment of a buffer.",
  "Buffer.toArray": "Read contents of buffer as an array in specified format",
  "Buffer.toBase64": "Convert buffer to ASCII base64 encoding.",
  "Buffer.toHex": "Convert a buffer to its hexadecimal representation.",
  "Buffer.toString": "Convert a buffer to string assuming UTF8 encoding",
  "Buffer.unpack": "Reads numbers from the buffer according to the format",
  "Buffer.write": "Write contents of `src` at `dstOffset` in current buffer.",
  "Colors": "Well known colors",
  "EventCreationMode": "How to create the event.",
  "EventCreationMode.CreateAndFire": "MicroBitEvent is initialised, and its event handlers are immediately fired (not suitable for use in interrupts!).",
  "EventCreationMode.CreateOnly": "MicroBitEvent is initialised, and no further processing takes place.",
  "Gesture.EightG": "Raised when a 8G shock is detected",
  "Gesture.FreeFall": "Raised when the board is falling!",
  "Gesture.LogoDown": "Raised when the logo is downward and the screen is vertical",
  "Gesture.LogoUp": "Raised when the logo is upward and the screen is vertical",
  "Gesture.ScreenDown": "Raised when the screen is pointing down and the board is horizontal",
  "Gesture.ScreenUp": "Raised when the screen is pointing up and the board is horizontal",
  "Gesture.Shake": "Raised when shaken",
  "Gesture.SixG": "Raised when a 6G shock is detected",
  "Gesture.ThreeG": "Raised when a 3G shock is detected",
  "Gesture.TiltLeft": "Raised when the screen is pointing left",
  "Gesture.TiltRight": "Raised when the screen is pointing right",
  "Image.clear": "Sets all pixels off.",
  "Image.height": "Gets the height in rows (always 5)",
  "Image.pixel": "Get the pixel state at position ``(x,y)``",
  "Image.pixelBrightness": "Gets the pixel brightness ([0..255]) at a given position",
  "Image.pixel|param|x": "pixel column",
  "Image.pixel|param|y": "pixel row",
  "Image.plotFrame": "Draws the ``index``-th frame of the image on the screen.",
  "Image.plotFrame|param|xOffset": "column index to start displaying the image",
  "Image.plotImage": "Plots the image at a given column to the screen",
  "Image.scrollImage": "Scrolls an image .",
  "Image.scrollImage|param|frameOffset": "x offset moved on each animation step, eg: 1, 2, 5",
  "Image.scrollImage|param|interval": "time between each animation step in milli seconds, eg: 200",
  "Image.setPixel": "Set a pixel state at position ``(x,y)``",
  "Image.setPixelBrightness": "Sets a specific pixel brightness at a given position",
  "Image.setPixel|param|value": "pixel state",
  "Image.setPixel|param|x": "pixel column",
  "Image.setPixel|param|y": "pixel row",
  "Image.showFrame": "Show a particular frame of the image strip.",
  "Image.showFrame|param|frame": "image frame to show",
  "Image.showImage": "Shows an frame from the image at offset ``x offset``.",
  "Image.showImage|param|interval": "time in milliseconds to pause after drawing",
  "Image.showImage|param|xOffset": "column index to start displaying the image",
  "Image.width": "Gets the width in columns",
  "Infinity": "Constant representing positive infinity.",
  "JSON.parse": "Converts a JavaScript Object Notation (JSON) string into an object.",
  "JSON.stringify": "Converts a JavaScript value to a JavaScript Object Notation (JSON) string.",
  "JSON.stringify|param|indent": "Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.",
  "JSON.stringify|param|replacer": "Not supported; use null.",
  "JSON.stringify|param|value": "A JavaScript value, usually an object or array, to be converted.",
  "Math": "More complex operations with numbers.",
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.constrain": "Constrains a number to be within a range",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.icos": "Returns the cosine of an input angle. This is an 8-bit approximation.",
  "Math.icos|param|theta": "input angle from 0-255",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.isin": "Returns the sine of an input angle. This is an 8-bit approximation.",
  "Math.isin|param|theta": "input angle from 0-255",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.map": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
  "Math.map|param|fromHigh": "the upper bound of the value's current range, eg: 1023",
  "Math.map|param|fromLow": "the lower bound of the value's current range",
  "Math.map|param|toHigh": "the upper bound of the value's target range, eg: 4",
  "Math.map|param|toLow": "the lower bound of the value's target range",
  "Math.map|param|value": "value to map in ranges",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomBoolean": "Generates a `true` or `false` value randomly, just like flipping a coin.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.roundWithPrecision": "Rounds ``x`` to a number with the given number of ``digits``",
  "Math.roundWithPrecision|param|digits": "the number of resulting digits",
  "Math.roundWithPrecision|param|x": "the number to round",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "NaN": "Constant representing Not-A-Number.",
  "Number.isNaN": "Check if a given value is of type Number and it is a NaN.",
  "Number.toString": "Returns a string representation of a number.",
  "Object.keys": "Return the field names in an object.",
  "String": "Combine, split, and search text strings.",
  "String.charAt": "Return the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Return the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "See how the order of characters in two strings is different (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.includes": "Determines whether a string contains the characters of a specified string.",
  "String.includes|param|searchValue": "the text to find",
  "String.includes|param|start": "optional start index for the search",
  "String.indexOf": "Returns the position of the first occurrence of a specified value in a string.",
  "String.indexOf|param|searchValue": "the text to find",
  "String.indexOf|param|start": "optional start index for the search",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.replace": "Return the current string with the first occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll": "Return the current string with each occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replaceAll|param|toReplace": "the substring to replace in the current string",
  "String.replace|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replace|param|toReplace": "the substring to replace in the current string",
  "String.slice": "Return a substring of the current string.",
  "String.slice|param|end": "one-past-last character index",
  "String.slice|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.split": "Splits the string according to the separators",
  "String.split|param|separator": "@param limit",
  "String.substr": "Return a substring of the current string.",
  "String.substr|param|length": "number of characters to extract, eg: 10",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.toLowerCase": "Converts the string to lower case characters.",
  "String.toUpperCase": "Converts the string to upper case characters.",
  "String.trim": "Return a substring of the current string with whitespace removed from both ends",
  "String@type": "Combine, split, and search text strings.",
  "StringMap": "A dictionary from string key to string values",
  "_py.range": "Returns a sequence of numbers up to but not including the limit\n\nIf more than one argument is passed, this argument is instead used for the first value in the range",
  "_py.range|param|first": "The value to end the sequence before. This value will not show up in the result.",
  "_py.range|param|step": "The value to increase or decrease by for each step in the range. Must be a nonzero integer",
  "_py.range|param|stop": "The value to end the sequence before. This value will not show up in the result",
  "_py.slice": "Returns a section of an array according to python's extended slice syntax",
  "_py.stringSlice": "Returns a section of a string according to python's extended slice syntax",
  "basic": "Provides access to basic Calliope mini functionality.\n\nProvides access to basic calliope mini functionality.\n\nProvides access to basic Calliope mini functionality.",
  "basic.clearScreen": "Turn off all LEDs",
  "basic.color": "Converts the color name to a number",
  "basic.forever": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
  "basic.pause": "Pause for the specified time in milliseconds",
  "basic.pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "basic.plotLeds": "Draws an image on the LED screen.",
  "basic.plotLeds|param|leds": "pattern of LEDs to turn on/off",
  "basic.rgb": "Converts red, green, blue channels into a RGB color",
  "basic.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
  "basic.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
  "basic.rgb|param|red": "value of the red channel between 0 and 255. eg: 255",
  "basic.setLedColor": "Sets the color on the built-in RGB LED. Set to 0 to turn off.",
  "basic.setLedColorDal": "Sets the color on the built-in RGB LED. Set to 0 to turn off.",
  "basic.setLedColorsCodal": "Sets the color on the built-in RGB LED. Set to 0 to turn off.",
  "basic.setLedColorsCodal|param|brightness": "The LED brightness in percent.",
  "basic.setLedColorsCodal|param|color1": "The color of the first LED in RGB format (e.g., 0xFF0000 for red).",
  "basic.setLedColorsCodal|param|color2": "The second LED color.",
  "basic.setLedColorsCodal|param|color3": "The third LED color.",
  "basic.setLedColor|param|color": "The color of the LED in RGB format (e.g., 0xFF0000 for red).",
  "basic.showAnimation": "Shows a sequence of LED screens as an animation.",
  "basic.showAnimation|param|interval": "time in milliseconds between each redraw.",
  "basic.showAnimation|param|leds": "pattern of LEDs to turn on/off",
  "basic.showArrow": "Draws an arrow on the LED screen",
  "basic.showArrow|param|direction": "the direction of the arrow",
  "basic.showArrow|param|interval": "the amount of time (milliseconds) to show the icon. Default is 600.",
  "basic.showCompass": "Draws needle on the screen which always points to north",
  "basic.showCompass|param|interval": "the amount of time (milliseconds) to show the needle. Default is 600.",
  "basic.showIcon": "Draws the selected icon on the LED screen",
  "basic.showIcon|param|icon": "the predefined icon id",
  "basic.showIcon|param|interval": "the amount of time (milliseconds) to block the LED Matrix for showing the icon. Default is 600.",
  "basic.showLeds": "Draws an image on the LED screen.",
  "basic.showLeds|param|interval": "time in milliseconds to pause after drawing.",
  "basic.showLeds|param|leds": "the pattern of LED to turn on/off.",
  "basic.showNumber": "Scroll a number on the screen. If the number fits on the screen (i.e. is a single digit), do not scroll.",
  "basic.showNumber|param|interval": "speed of scroll; eg: 50, 100, 150, 200",
  "basic.showString": "Display text on the display, one character at a time. If the string fits on the screen (i.e. is one letter), does not scroll.",
  "basic.showString|param|interval": "how fast to shift characters; eg: 50, 100, 150, 200",
  "basic.showString|param|text": "the text to scroll on the screen, eg: \"hi!\"",
  "basic.turnRgbLedOff": "Sets the color on the built-in RGB LED. Set to 0 to turn off.",
  "console": "Reading and writing data to the console output.",
  "console.addListener": "Adds a listener for the log messages",
  "console.inspect": "Convert any object or value to a string representation",
  "console.inspect|param|maxElements": "[optional] max number values in an object to include in output",
  "console.inspect|param|obj": "value to be converted to a string",
  "console.log": "Write a line of text to the console output.",
  "console.logValue": "Write a name:value pair as a line of text to the console output.",
  "console.logValue|param|name": "name of the value stream, eg: \"x\"",
  "console.logValue|param|value": "to write",
  "console.log|param|value": "to send",
  "console.minPriority": "Minimum priority to send messages to listeners",
  "console.removeListener": "Removes a listener",
  "control": "Runtime and event utilities.",
  "control._hardwareVersion": "Returns the major version of the microbit",
  "control.allocateEventSource": "Incrementally allocates event source identifiers.",
  "control.allocateNotifyEvent": "Allocates the next user notification event",
  "control.assert": "If the condition is false, display msg on serial console, and panic with code 098.",
  "control.benchmark": "Runs the function and returns run time in microseconds.",
  "control.createBuffer": "Create a new zero-initialized buffer.",
  "control.createBufferFromUTF8": "Create a new buffer with UTF8-encoded string",
  "control.createBufferFromUTF8|param|str": "the string to put in the buffer",
  "control.createBuffer|param|size": "number of bytes in the buffer",
  "control.deviceLongSerialNumber": "Derive a unique, consistent 64-bit serial number of this device from internal data.",
  "control.deviceName": "Make a friendly name for the device based on its serial number",
  "control.deviceSerialNumber": "Derive a unique, consistent serial number of this device from internal data.",
  "control.dmesg": "Write a message to DMESG debugging buffer.",
  "control.dmesgPerfCounters": "Dump values of profiling performance counters.",
  "control.dmesgPtr": "Write a message and value (pointer) to DMESG debugging buffer.",
  "control.enablePerfCounter": "Enable profiling for current function.",
  "control.eventSourceId": "Returns the value of a C++ runtime constant",
  "control.eventTimestamp": "Gets the timestamp of the last event executed on the bus",
  "control.eventValue": "Gets the value of the last event executed on the bus",
  "control.eventValueId": "Returns the value of a C++ runtime constant",
  "control.gc": "Force GC and dump basic information about heap.",
  "control.gcStats": "Get various statistics about the garbage collector (GC)",
  "control.heapDump": "Force GC and halt waiting for debugger to do a full heap dump.",
  "control.heapSnapshot": "Record a heap snapshot to debug memory leaks.",
  "control.inBackground": "Schedules code that run in the background.",
  "control.micros": "Gets current time in microseconds. Overflows every ~18 minutes.",
  "control.millis": "Gets the number of milliseconds elapsed since power on.",
  "control.onEvent": "Registers an event handler.",
  "control.panic": "Display specified error code and stop the program.",
  "control.profilingEnabled": "Return true if profiling is enabled in the current build.",
  "control.raiseEvent": "Raises an event in the event bus.",
  "control.raiseEvent|param|mode": "optional definition of how the event should be processed after construction (default is CREATE_AND_FIRE).",
  "control.raiseEvent|param|src": "ID of the MicroBit Component that generated the event e.g. MICROBIT_ID_BUTTON_A.",
  "control.raiseEvent|param|value": "Component specific code indicating the cause of the event.",
  "control.ramSize": "Returns estimated size of memory in bytes.",
  "control.reset": "Resets the Calliope mini.",
  "control.runInParallel": "Run other code in the parallel.",
  "control.runtimeWarning": "Display warning in the simulator.",
  "control.setDebugFlags": "Set flags used when connecting an external debugger.",
  "control.simmessages.onReceived": "Registers the handler for a message on a given channel",
  "control.waitForEvent": "Blocks the calling thread until the specified event is raised.",
  "control.waitMicros": "Blocks the current fiber for the given microseconds",
  "control.waitMicros|param|micros": "number of micro-seconds to wait. eg: 4",
  "convertToText": "Convert any value to text",
  "convertToText|param|value": "value to be converted to text",
  "forever": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
  "game": "A single-LED sprite game engine",
  "game.LedSprite": "A game sprite rendered as a single LED",
  "game.LedSprite.blink": "Reports the ``blink`` duration of a sprite",
  "game.LedSprite.brightness": "Reports the ``brightness` of a sprite on the LED screen",
  "game.LedSprite.change": "Changes a property of the sprite",
  "game.LedSprite.changeBlinkBy": "Changes the ``blink`` duration by the given amount of millisecons",
  "game.LedSprite.changeBlinkBy|param|ms": "TODO",
  "game.LedSprite.changeBrightnessBy": "Changes the ``y`` position by the given amount",
  "game.LedSprite.changeBrightnessBy|param|value": "the value to change brightness",
  "game.LedSprite.changeDirectionBy": "Changes the ``direction`` position by the given amount by turning right",
  "game.LedSprite.changeDirectionBy|param|angle": "TODO",
  "game.LedSprite.changeXBy": "Changes the ``x`` position by the given amount",
  "game.LedSprite.changeXBy|param|x": "TODO",
  "game.LedSprite.changeYBy": "Changes the ``y`` position by the given amount",
  "game.LedSprite.changeYBy|param|y": "TODO",
  "game.LedSprite.change|param|property": "the name of the property to change",
  "game.LedSprite.change|param|value": "amount of change, eg: 1",
  "game.LedSprite.delete": "Deletes the sprite from the game engine. The sprite will no longer appear on the screen or interact with other sprites.",
  "game.LedSprite.direction": "Reports the current direction of a sprite",
  "game.LedSprite.get": "Gets a property of the sprite",
  "game.LedSprite.get|param|property": "the name of the property to change",
  "game.LedSprite.goTo": "Go to this position on the screen",
  "game.LedSprite.goTo|param|x": "TODO",
  "game.LedSprite.goTo|param|y": "TODO",
  "game.LedSprite.ifOnEdgeBounce": "If touching the edge of the stage and facing towards it, then turn away.",
  "game.LedSprite.isDeleted": "Reports whether the sprite has been deleted from the game engine.",
  "game.LedSprite.isTouching": "Reports true if sprite has the same position as specified sprite",
  "game.LedSprite.isTouchingEdge": "Reports true if sprite is touching an edge",
  "game.LedSprite.isTouching|param|other": "the other sprite to check overlap or touch",
  "game.LedSprite.move": "Move a certain number of LEDs in the current direction",
  "game.LedSprite.move|param|leds": "number of leds to move, eg: 1, -1",
  "game.LedSprite.off": "Turns off the sprite (on by default)",
  "game.LedSprite.on": "Turns on the sprite (on by default)",
  "game.LedSprite.set": "Sets a property of the sprite",
  "game.LedSprite.setBlink": "Sets the blink duration interval in millisecond.",
  "game.LedSprite.setBlink|param|ms": "TODO",
  "game.LedSprite.setBrightness": "Set the ``brightness`` of a sprite",
  "game.LedSprite.setBrightness|param|brightness": "the brightness from 0 (off) to 255 (on), eg: 255.",
  "game.LedSprite.setDirection": "Set the direction of the current sprite, rounded to the nearest multiple of 45",
  "game.LedSprite.setDirection|param|degrees": "new direction in degrees",
  "game.LedSprite.setX": "Set the ``x`` position of a sprite",
  "game.LedSprite.setX|param|x": "TODO",
  "game.LedSprite.setY": "Set the ``y`` position of a sprite",
  "game.LedSprite.setY|param|y": "TODO",
  "game.LedSprite.set|param|property": "the name of the property to change",
  "game.LedSprite.turn": "Turn the sprite",
  "game.LedSprite.turnLeft": "Turn to the left (counter-clockwise)",
  "game.LedSprite.turnLeft|param|degrees": "TODO",
  "game.LedSprite.turnRight": "Turn to the right (clockwise)",
  "game.LedSprite.turnRight|param|degrees": "TODO",
  "game.LedSprite.turn|param|degrees": "angle in degrees to turn, eg: 45, 90, 180, 135",
  "game.LedSprite.turn|param|direction": "left or right",
  "game.LedSprite.x": "Reports the ``x`` position of a sprite on the LED screen",
  "game.LedSprite.y": "Reports the ``y`` position of a sprite on the LED screen",
  "game.addLife": "Add life points to the current life amount",
  "game.addLife|param|lives": "amount of lives to add",
  "game.addScore": "Adds points to the current score and shows an animation",
  "game.addScore|param|points": "amount of points to change, eg: 1",
  "game.createSprite": "Creates a new LED sprite pointing to the right.",
  "game.createSprite|param|x": "sprite horizontal coordinate, eg: 2",
  "game.createSprite|param|y": "sprite vertical coordinate, eg: 2",
  "game.currentTime": "Gets the remaining time (since `start countdown`) or current time (since the device started or `start stopwatch`) in milliseconds.",
  "game.gameOver": "Displays a game over animation and the score.",
  "game.invalidSprite": "Gets an invalid sprite; used to initialize locals.",
  "game.isGameOver": "Indicates if the game is over and displaying the game over sequence.",
  "game.isPaused": "Indicates if the game rendering is paused to allow other animations",
  "game.isRunning": "Indicates if the game is still running. Returns `false` if the game is over or paused.",
  "game.level": "Gets the current level",
  "game.levelUp": "Increments the level and display a message.",
  "game.life": "Gets the current life",
  "game.pause": "Pauses the game rendering engine to allow other animations",
  "game.removeLife": "Remove some life",
  "game.removeLife|param|life": "amount of life to remove",
  "game.resume": "Resumes the game rendering engine",
  "game.score": "Gets the current score",
  "game.setLife": "Sets the current life value",
  "game.setLife|param|value": "current life value",
  "game.setScore": "Sets the current score value",
  "game.setScore|param|value": "new score value.",
  "game.showScore": "Displays the score on the screen.",
  "game.startCountdown": "Shows an animation, then starts a game countdown timer, which causes Game Over when it reaches 0",
  "game.startCountdown|param|ms": "countdown duration in milliseconds, eg: 10000",
  "game.startStopwatch": "Starts a stopwatch timer. `current time` will return the elapsed time.",
  "hex": "Tagged hex literal converter",
  "images": "Creation, manipulation and display of LED images.",
  "images.createBigImage": "Creates an image with 2 frames.",
  "images.createImage": "Creates an image that fits on the LED screen.",
  "input": "Events and data from sensors",
  "input.acceleration": "Get the acceleration value in milli-gravitys (when the board is laying flat with the screen up, x=0, y=0 and z=-1024)",
  "input.acceleration|param|dimension": "x, y, or z dimension, eg: Dimension.X",
  "input.buttonEventClick": "Returns the ID of an Click Event",
  "input.buttonEventDown": "Returns the ID of an Down Event",
  "input.buttonEventValue": "Returns the ID of an Button Event",
  "input.buttonIsPressed": "Get the button state (pressed or not) for ``A`` and ``B``.",
  "input.buttonIsPressed|param|button": "the button to query the request, eg: Button.A",
  "input.calibrateCompass": "Obsolete, compass calibration is automatic.",
  "input.compassHeading": "Get the current compass heading in degrees.",
  "input.isCalibratedCompass": "Returns 'true' when the compass is calibrated. Otherwise returns 'false'.",
  "input.isGesture": "Tests if a gesture is currently detected.",
  "input.isGesture|param|gesture": "the type of gesture to detect, eg: Gesture.Shake",
  "input.lightLevel": "Reads the light level applied to the LED screen in a range from ``0`` (dark) to ``255`` bright.",
  "input.magneticForce": "Get the magnetic force value in ``micro-Teslas`` (``µT``). This function is not supported in the simulator.",
  "input.magneticForce|param|dimension": "the x, y, or z dimension, eg: Dimension.X",
  "input.onButtonEvent": "Do something when a button (A, B or both A+B) receives an event.",
  "input.onButtonEvent|param|body": "code to run when event is raised",
  "input.onButtonEvent|param|button": "the button",
  "input.onButtonEvent|param|eventType": "event Type",
  "input.onButtonPressed": "Do something when a button (A, B or both A+B) is pushed down and released again.",
  "input.onButtonPressed|param|body": "code to run when event is raised",
  "input.onButtonPressed|param|button": "the button that needs to be pressed",
  "input.onGesture": "Do something when when a gesture is done (like shaking the Calliope mini).",
  "input.onGesture|param|body": "code to run when gesture is raised",
  "input.onGesture|param|gesture": "the type of gesture to track, eg: Gesture.Shake",
  "input.onPinPressed": "Do something when a pin is touched and released again (while also touching the GND pin).",
  "input.onPinPressed|param|body": "the code to run when the pin is pressed",
  "input.onPinPressed|param|name": "the pin that needs to be pressed, eg: TouchPin.P0",
  "input.onPinReleased": "Do something when a pin is released.",
  "input.onPinReleased|param|body": "the code to run when the pin is released",
  "input.onPinReleased|param|name": "the pin that needs to be released, eg: TouchPin.P0",
  "input.onPinTouchEvent": "Do something when a pin receives an touch event (while also touching the GND pin).",
  "input.onPinTouchEvent|param|body": "the code to run when event is fired on pin",
  "input.onPinTouchEvent|param|name": "the pin, eg: TouchPin.P0",
  "input.pinIsPressed": "Get the pin state (pressed or not). Requires to hold the ground to close the circuit.",
  "input.pinIsPressed|param|name": "pin used to detect the touch, eg: TouchPin.P0",
  "input.rotation": "The pitch or roll of the device, rotation along the ``x-axis`` or ``y-axis``, in degrees.",
  "input.rotation|param|kind": "pitch or roll",
  "input.runningTime": "Gets the number of milliseconds elapsed since power on.",
  "input.runningTimeMicros": "Gets the number of microseconds elapsed since power on.",
  "input.setAccelerometerRange": "Sets the accelerometer sample range in gravities.",
  "input.setAccelerometerRange|param|range": "a value describe the maximum strengh of acceleration measured",
  "input.soundLevel": "Reads the loudness through the microphone from 0 (silent) to 255 (loud)",
  "input.temperature": "Gets the temperature in Celsius degrees (°C).",
  "led": "Control of the LED screen.",
  "led.barGraphToConsole": "Controls where plotbargraph prints to the console",
  "led.brightness": "Get the screen brightness from 0 (off) to 255 (full bright).",
  "led.displayMode": "Gets the current display mode",
  "led.enable": "Turns on or off the display",
  "led.fadeIn": "Fades in the screen display.",
  "led.fadeIn|param|ms": "fade time in milliseconds",
  "led.fadeOut": "Fades out the screen brightness.",
  "led.fadeOut|param|ms": "fade time in milliseconds",
  "led.plot": "Turn on the specified LED using x, y coordinates (x is horizontal, y is vertical). (0,0) is upper left.",
  "led.plotAll": "Turns all LEDS on",
  "led.plotBarGraph": "Displays a vertical bar graph based on the `value` and `high` value.\nIf `high` is 0, the chart gets adjusted automatically.",
  "led.plotBarGraph|param|high": "maximum value. If 0, maximum value adjusted automatically, eg: 0",
  "led.plotBarGraph|param|value": "current value to plot",
  "led.plotBarGraph|param|valueToConsole": "if true, prints value to the serial port",
  "led.plotBrightness": "Turn on the specified LED with specific brightness using x, y coordinates (x is horizontal, y is vertical). (0,0) is upper left.",
  "led.plotBrightness|param|brightness": "the brightness from 0 (off) to 255 (bright), eg:255",
  "led.plotBrightness|param|x": "the horizontal coordinate of the LED starting at 0",
  "led.plotBrightness|param|y": "the vertical coordinate of the LED starting at 0",
  "led.plot|param|x": "the horizontal coordinate of the LED starting at 0",
  "led.plot|param|y": "the vertical coordinate of the LED starting at 0",
  "led.point": "Get the on/off state of the specified LED using x, y coordinates. (0,0) is upper left.",
  "led.pointBrightness": "Get the brightness state of the specified LED using x, y coordinates. (0,0) is upper left.",
  "led.pointBrightness|param|x": "the horizontal coordinate of the LED",
  "led.pointBrightness|param|y": "the vertical coordinate of the LED",
  "led.point|param|x": "the horizontal coordinate of the LED",
  "led.point|param|y": "the vertical coordinate of the LED",
  "led.screenshot": "Takes a screenshot of the LED screen and returns an image.",
  "led.setBrightness": "Set the screen brightness from 0 (off) to 255 (full bright).",
  "led.setBrightness|param|value": "the brightness value, eg:255, 127, 0",
  "led.setDisplayMode": "Sets the display mode between black and white and greyscale for rendering LEDs.",
  "led.setDisplayMode|param|mode": "mode the display mode in which the screen operates",
  "led.stopAnimation": "Cancels the current animation and clears other pending animations.",
  "led.toggle": "Toggles a particular pixel",
  "led.toggleAll": "Inverts the current LED display",
  "led.toggle|param|x": "pixel column",
  "led.toggle|param|y": "pixel row",
  "led.unplot": "Turn off the specified LED using x, y coordinates (x is horizontal, y is vertical). (0,0) is upper left.",
  "led.unplot|param|x": "the horizontal coordinate of the LED",
  "led.unplot|param|y": "the vertical coordinate of the LED",
  "light.sendWS2812Buffer": "Sends a color buffer to a light strip",
  "light.sendWS2812BufferWithBrightness": "Sends a color buffer to a light strip",
  "light.setMode": "Sets the light mode of a pin",
  "loops.everyInterval": "Repeats the code forever in the background.\nAfter each iteration, allows other codes to run for a set duration\nso that it runs on a timer",
  "loops.everyInterval|param|interval": "time (in ms) to wait between each iteration of the action.",
  "motors.dualMotorPowerDal": "Controls two motors attached to the board. Switches to dual-motor mode!",
  "motors.motorCommandDal": "Send break, coast or sleep commands to the motor. Has no effect in dual-motor mode.",
  "motors.motorPowerDal": "Turns on the motor at a certain percent of power. Switches to single motor mode!",
  "motors.motorPowerDal|param|power": "%percent of power sent to the motor. Negative power goes backward. eg: 50",
  "msgpack.packNumberArray": "Pack a number array into a buffer.",
  "msgpack.packNumberArray|param|nums": "the numbers to be packed",
  "msgpack.unpackNumberArray": "Unpacks a buffer into a number array.",
  "music": "Generation of music tones.",
  "music.beat": "Returns the duration of a beat in milli-seconds",
  "music.beginMelody": "Use startMelody instead",
  "music.builtInMelody": "Gets the melody array of a built-in melody.",
  "music.changeTempoBy": "Change the tempo by the specified amount",
  "music.changeTempoBy|param|bpm": "The change in beats per minute to the tempo, eg: 20",
  "music.getFrequencyForNote": "Converts an octave and note offset into an integer frequency.\nReturns 0 if the note is out of range.\n* @param octave    The octave of the note (1 - 8)\n\n@returns         A frequency in HZ or 0 if out of range",
  "music.getFrequencyForNote|param|note": "The offset of the note within the octave",
  "music.melodyEditor": "Create a melody with the melody editor.",
  "music.noteFrequency": "Gets the frequency of a note.",
  "music.noteFrequency|param|name": "the note name",
  "music.playMelody": "Play a melody from the melody editor.",
  "music.playMelody|param|melody": "string of up to eight notes [C D E F G A B C5] or rests [-] separated by spaces, which will be played one at a time, ex: \"E D G F B A C5 B \"",
  "music.playMelody|param|tempo": "number in beats per minute (bpm), dictating how long each note will play for",
  "music.playTone": "Plays a tone through pin ``P0`` for the given duration.",
  "music.playTone|param|frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
  "music.playTone|param|ms": "tone duration in milliseconds (ms)",
  "music.rest": "Rests (plays nothing) for a specified time through pin ``P0``.",
  "music.rest|param|ms": "rest duration in milliseconds (ms)",
  "music.ringTone": "Plays a tone through pin ``P0``.",
  "music.ringTone|param|frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
  "music.setPlayTone": "Sets a custom playTone function for playing melodies",
  "music.setTempo": "Sets the tempo to the specified amount",
  "music.setTempo|param|bpm": "The new tempo in beats per minute, eg: 120",
  "music.speakerPlayTone": "Plays a tone through ``speaker`` for the given duration.",
  "music.speakerPlayTone|param|frequency": "pitch of the tone to play in Hertz (Hz)",
  "music.speakerPlayTone|param|ms": "tone duration in milliseconds (ms)",
  "music.startMelody": "Starts playing a melody.\nNotes are expressed as a string of characters with this format: NOTE[octave][:duration]",
  "music.startMelody|param|melodyArray": "the melody array to play",
  "music.startMelody|param|options": "melody options, once / forever, in the foreground / background",
  "music.stopAllSounds": "Stop all sounds and melodies currently playing.",
  "music.stopMelody": "Stops the melodies",
  "music.stopMelody|param|options": "which melody to stop",
  "music.tempo": "Returns the tempo in beats per minute. Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.",
  "parseFloat": "Convert a string to a number.",
  "parseInt": "Convert a string to an integer.\n\n\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal.",
  "parseInt|param|radix": "optional A value between 2 and 36 that specifies the base of the number in text.",
  "parseInt|param|text": "A string to convert into an integral number. eg: \"123\"",
  "pause": "Pause for the specified time in milliseconds",
  "pauseUntil": "Busy wait for a condition to be true",
  "pauseUntil|param|condition": "condition to test for",
  "pauseUntil|param|timeOut": "if positive, maximum duration to wait for in milliseconds",
  "pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "pins.C10": "Pin C10",
  "pins.C11": "Pin C11",
  "pins.C12": "Pin C12",
  "pins.C16": "Pin C16",
  "pins.C17": "Pin C17",
  "pins.C18": "Pin C18",
  "pins.C4": "Pin C4",
  "pins.C5": "Pin C5",
  "pins.C6": "Pin C6",
  "pins.C7": "Pin C7",
  "pins.C8": "Pin C8",
  "pins.C9": "Pin C9",
  "pins.P0": "Pin P0",
  "pins.P1": "Pin P1",
  "pins.P2": "Pin P2",
  "pins.P3": "Pin P3",
  "pins.analogPitch": "Emit a plse-width modulation (PWM) signal to the current pitch pin. Use `analog set pitch pin` to define the pitch pin.",
  "pins.analogPitchVolume": "Gets the volume the pitch pin from 0..255",
  "pins.analogPitch|param|frequency": "frequency to modulate in Hz.",
  "pins.analogPitch|param|ms": "duration of the pitch in milli seconds.",
  "pins.analogReadPin": "Read the connector value as analog, that is, as a value comprised between 0 and 1023.",
  "pins.analogReadPin|param|name": "pin to write to, eg: AnalogPin.P0",
  "pins.analogSetPeriod": "Configure the pulse-width modulation (PWM) period of the analog output in microseconds.\nIf this pin is not configured as an analog output (using `analog write pin`), the operation has no effect.",
  "pins.analogSetPeriod|param|micros": "period in micro seconds. eg:20000",
  "pins.analogSetPeriod|param|name": "analog pin to set period to, eg: AnalogPin.P0",
  "pins.analogSetPitchPin": "Set the pin used when using analog pitch or music.",
  "pins.analogSetPitchPin|param|name": "pin to modulate pitch from",
  "pins.analogSetPitchVolume": "Sets the volume on the pitch pin",
  "pins.analogSetPitchVolume|param|volume": "the intensity of the sound from 0..255",
  "pins.analogWritePin": "Set the connector value as analog. Value must be comprised between 0 and 1023.",
  "pins.analogWritePin|param|name": "pin name to write to, eg: AnalogPin.P0",
  "pins.analogWritePin|param|value": "value to write to the pin between ``0`` and ``1023``. eg:1023,0",
  "pins.createBuffer": "Create a new zero-initialized buffer.",
  "pins.createBuffer|param|size": "number of bytes in the buffer",
  "pins.digitalReadPin": "Read the specified pin or connector as either 0 or 1",
  "pins.digitalReadPin|param|name": "pin to read from, eg: DigitalPin.P0",
  "pins.digitalWritePin": "Set a pin or connector value to either 0 or 1.",
  "pins.digitalWritePin|param|name": "pin to write to, eg: DigitalPin.P0",
  "pins.digitalWritePin|param|value": "value to set on the pin, 1 eg,0",
  "pins.i2cReadBuffer": "Read `size` bytes from a 7-bit I2C `address`.",
  "pins.i2cReadNumber": "Read one number from 7-bit I2C address.",
  "pins.i2cWriteBuffer": "Write bytes to a 7-bit I2C `address`.",
  "pins.i2cWriteNumber": "Write one number to a 7-bit I2C address.",
  "pins.map": "Map a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
  "pins.map|param|fromHigh": "the upper bound of the value's current range, eg: 1023",
  "pins.map|param|fromLow": "the lower bound of the value's current range",
  "pins.map|param|toHigh": "the upper bound of the value's target range, eg: 4",
  "pins.map|param|toLow": "the lower bound of the value's target range",
  "pins.map|param|value": "value to map in ranges",
  "pins.onPulsed": "Configure the pin as a digital input and generate an event when the pin is pulsed either high or low.",
  "pins.onPulsed|param|name": "digital pin to register to, eg: DigitalPin.P0",
  "pins.onPulsed|param|pulse": "the value of the pulse, eg: PulseValue.High",
  "pins.pulseDuration": "Get the duration of the last pulse in microseconds. This function should be called from a ``onPulsed`` handler.",
  "pins.pulseIn": "Return the duration of a pulse at a pin in microseconds.",
  "pins.pulseIn|param|name": "the pin which measures the pulse, eg: DigitalPin.P0",
  "pins.pulseIn|param|value": "the value of the pulse, eg: PulseValue.High",
  "pins.pushButton": "Mounts a push button on the given pin",
  "pins.servoSetContinuous": "Specifies that a continuous servo is connected.",
  "pins.servoSetPulse": "Configure the IO pin as an analog/pwm output and set a pulse width. The period is 20 ms period and the pulse width is set based on the value given in **microseconds** or `1/1000` milliseconds.",
  "pins.servoSetPulse|param|micros": "pulse duration in micro seconds, eg:1500",
  "pins.servoSetPulse|param|name": "pin name",
  "pins.servoWritePin": "Write a value to the servo, controlling the shaft accordingly. On a standard servo, this will set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).",
  "pins.servoWritePin|param|name": "pin to write to, eg: AnalogPin.P0",
  "pins.servoWritePin|param|value": "angle or rotation speed, eg:180,90,0",
  "pins.setAudioPin": "Set the pin used when producing sounds and melodies. Default is P0.",
  "pins.setAudioPinEnabled": "Sets whether or not audio will be output using a pin on the edge\nconnector.",
  "pins.setAudioPin|param|name": "pin to modulate pitch from",
  "pins.setEvents": "Configure the events emitted by this pin. Events can be subscribed to\nusing ``control.onEvent()``.",
  "pins.setEvents|param|name": "pin to set the event mode on, eg: DigitalPin.P0",
  "pins.setEvents|param|type": "the type of events for this pin to emit, eg: PinEventType.Edge",
  "pins.setMatrixWidth": "Set the matrix width for Neopixel strip (already assigned to a pin).\nShould be used in conjunction with `set matrix width` from Neopixel package.",
  "pins.setPull": "Configure the pull directiion of of a pin.",
  "pins.setPull|param|name": "pin to set the pull mode on, eg: DigitalPin.P0",
  "pins.setPull|param|pull": "one of the mbed pull configurations, eg: PinPullMode.PullUp",
  "pins.spiFormat": "Set the SPI bits and mode",
  "pins.spiFormat|param|bits": "the number of bits, eg: 8",
  "pins.spiFormat|param|mode": "the mode, eg: 3",
  "pins.spiFrequency": "Set the SPI frequency",
  "pins.spiFrequency|param|frequency": "the clock frequency, eg: 1000000",
  "pins.spiPins": "Set the MOSI, MISO, SCK pins used by the SPI connection",
  "pins.spiTransfer": "Write to and read from the SPI slave at the same time",
  "pins.spiTransfer|param|command": "Data to be sent to the SPI slave (can be null)",
  "pins.spiTransfer|param|response": "Data received from the SPI slave (can be null)",
  "pins.spiWrite": "Write to the SPI slave and return the response",
  "pins.spiWrite|param|value": "Data to be sent to the SPI slave",
  "randint": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "randint|param|max": "the upper inclusive bound, eg: 10",
  "randint|param|min": "the lower inclusive bound, eg: 0",
  "serial": "Reading and writing data over a serial connection.",
  "serial.NEW_LINE": "The string used to mark a new line, default is \\r\\n",
  "serial.delimiters": "Return the corresponding delimiter string",
  "serial.onDataReceived": "Register an event to be fired when one of the delimiter is matched.",
  "serial.onDataReceived|param|delimiters": "the characters to match received characters against.",
  "serial.readBuffer": "Read multiple characters from the receive buffer. \nIf length is positive, pauses until enough characters are present.",
  "serial.readBuffer|param|length": "default buffer length",
  "serial.readLine": "Read a line of text from the serial port.",
  "serial.readString": "Read the buffered received data as a string",
  "serial.readUntil": "Read a line of text from the serial port and return the buffer when the delimiter is met.",
  "serial.readUntil|param|delimiter": "text delimiter that separates each text chunk",
  "serial.redirect": "Set the serial input and output to use pins instead of the USB connection.",
  "serial.redirectToUSB": "Direct the serial input and output to use the USB connection.",
  "serial.redirect|param|rate": "the new baud rate. eg: 115200",
  "serial.redirect|param|rx": "the new reception pin, eg: SerialPin.P1",
  "serial.redirect|param|tx": "the new transmission pin, eg: SerialPin.P0",
  "serial.setBaudRate": "Set the baud rate of the serial port",
  "serial.setRxBufferSize": "Sets the size of the RX buffer in bytes",
  "serial.setRxBufferSize|param|size": "length of the rx buffer in bytes, eg: 32",
  "serial.setTxBufferSize": "Sets the size of the TX buffer in bytes",
  "serial.setTxBufferSize|param|size": "length of the tx buffer in bytes, eg: 32",
  "serial.setWriteLinePadding": "Sets the padding length for lines sent with \"write line\".",
  "serial.setWriteLinePadding|param|length": "the number of bytes alignment, eg: 0",
  "serial.writeBuffer": "Send a buffer through serial connection",
  "serial.writeDmesg": "Send DMESG debug buffer over serial.",
  "serial.writeLine": "Print a line of text to the serial port",
  "serial.writeNumber": "Print a numeric value to the serial port",
  "serial.writeNumbers": "Print an array of numeric values as CSV to the serial port",
  "serial.writeString": "Send a piece of text through the serial connection.",
  "serial.writeValue": "Write a name:value pair as a line to the serial port.",
  "serial.writeValue|param|name": "name of the value stream, eg: x",
  "serial.writeValue|param|value": "to write"
}